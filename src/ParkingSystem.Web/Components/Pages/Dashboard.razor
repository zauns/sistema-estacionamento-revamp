@page "/dashboard" 
@inject IParkingApiService ApiService
@using ParkingSystem.Web.Services
@using ParkingSystem.Web.Components.Shared
@using ParkingSystem.Web.Models

<PageTitle>Dashboard - Sistema de Estacionamento</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Dashboard de Ocupação</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText Class="mt-2">Carregando dados...</MudText>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
    else
    {
        <MudGrid Spacing="3">
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6">Vagas Ocupadas</MudText>
                    <MudText Typo="Typo.h3" Color="Color.Primary">@occupiedSpots</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6">Vagas Disponíveis</MudText>
                    <MudText Typo="Typo.h3" Color="Color.Success">@availableSpots</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6">Total de Vagas</MudText>
                    <MudText Typo="Typo.h3" Color="Color.Default">@totalSpots</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6">Taxa de Ocupação</MudText>
                    <MudText Typo="Typo.h3" Color="Color.Warning">@occupancyRate.ToString("P0")</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <!-- Occupancy Progress Bar Section -->
        <MudPaper Class="pa-4 mt-4" Elevation="3">
            <MudText Typo="Typo.h6" GutterBottom="true">Ocupação do Estacionamento</MudText>
            <OccupancyProgressBar OccupiedSpots="@occupiedSpots" TotalSpots="@totalSpots" />
        </MudPaper>

        <!-- Parking Map Section -->
        <MudPaper Class="pa-4 mt-4" Elevation="3">
            <ParkingMapGrid ParkingSpots="@parkingSpots" OnSpotClick="@HandleSpotClick" />
        </MudPaper>
    }
</MudContainer>

<!-- Spot Detail Modal -->
<SpotDetailModal SelectedSpot="@selectedSpot" 
                 @bind-IsOpen="@isModalOpen" 
                 OnClose="@HandleModalClose" />

@code {
    private int occupiedSpots;
    private int availableSpots;
    private int totalSpots;
    private double occupancyRate;
    private List<ParkingSpotDto> parkingSpots = new();

    private bool isLoading = true;
    private string? errorMessage;
    
    // Modal state
    private bool isModalOpen = false;
    private ParkingSpotDto? selectedSpot;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            await LoadStatsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar o dashboard: {ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Dashboard Error: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadStatsAsync()
    {
        try
        {
            var spots = await ApiService.GetParkingSpotsAsync();
            if (spots == null || !spots.Any())
            {
                // If API fails, create mock data for testing
                System.Diagnostics.Debug.WriteLine("API failed, using mock data");
                parkingSpots = CreateMockData();
            }
            else
            {
                parkingSpots = spots;
                System.Diagnostics.Debug.WriteLine($"API Success: Loaded {spots.Count} spots");
            }
            
            // Calculate stats from the parking spots data
            totalSpots = parkingSpots.Count;
            occupiedSpots = parkingSpots.Count(s => s.IsOccupied);
            availableSpots = totalSpots - occupiedSpots;
            occupancyRate = totalSpots > 0 ? (double)occupiedSpots / totalSpots : 0;
            
            // Debug logging
            System.Diagnostics.Debug.WriteLine($"Final stats: {totalSpots} total, {occupiedSpots} occupied, {availableSpots} available");
            foreach (var spot in parkingSpots.Take(10)) // Log first 10 spots
            {
                System.Diagnostics.Debug.WriteLine($"Spot {spot.Number}: IsOccupied={spot.IsOccupied}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar estatísticas: {ex.Message}";
            System.Diagnostics.Debug.WriteLine($"LoadStats Error: {ex}");
            // Use mock data as fallback
            parkingSpots = CreateMockData();
            totalSpots = parkingSpots.Count;
            occupiedSpots = parkingSpots.Count(s => s.IsOccupied);
            availableSpots = totalSpots - occupiedSpots;
            occupancyRate = totalSpots > 0 ? (double)occupiedSpots / totalSpots : 0;
        }
    }

    private List<ParkingSpotDto> CreateMockData()
    {
        var mockSpots = new List<ParkingSpotDto>();
        
        // Create 50 spots (A01-A50) with mixed occupancy to match the first image
        var occupiedSpots = new HashSet<int> { 1, 2, 3, 4, 8, 10, 11, 13, 14, 16, 18, 19, 20, 21, 24, 27, 28, 29, 32, 37, 38, 40, 41, 42, 44, 46, 48, 49, 50 };
        
        for (int i = 1; i <= 50; i++)
        {
            mockSpots.Add(new ParkingSpotDto
            {
                Id = i,
                Number = $"A{i:D2}",
                IsOccupied = occupiedSpots.Contains(i)
            });
        }
        
        return mockSpots;
    }

    private void HandleSpotClick(ParkingSpotDto spot)
    {
        System.Diagnostics.Debug.WriteLine($"Spot {spot.Number} clicked - Status: {(spot.IsOccupied ? "Occupied" : "Available")}");
        
        selectedSpot = spot;
        isModalOpen = true;
    }
    
    private void HandleModalClose()
    {
        isModalOpen = false;
        selectedSpot = null;
    }
}